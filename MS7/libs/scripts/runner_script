#!/bin/bash

set -euo pipefail

# Runner script for MS7 programs.

# Parse command line.
# Parsing command line args.
nodes=1
tasks=1
net=""
mem=""
gpu=""
timebound="00:01:00"
threads=1
program=$0
original_arguments=$*
usage="usage: $0 [-[-]nodes=nodes to use] [-[-]tasks=tasks to run] [-[-]threads=CPU cores to allocate per task] [-[-]mem=MB per task] [--] [other arguments]"
while (($#)); do
    arg=$1
    case $arg in
        -nodes=*|--nodes=*)
            nodes="${arg#*=}"
            shift
            ;;
        -tasks=*|--tasks=*)
            tasks="${arg#*=}"
            shift
            ;;
        -net=*|--net=*)
            net="${arg#*=}"
            shift
            ;;
        -threads=*|--threads=*)
            threads="${arg#*=}"
            shift
            ;;
        -mem=*|--mem=*)
            mem="${arg#*=}"
            shift
            ;;
        -gpu=*|--gpu=*)
            gpu="${arg#*=}"
            shift
            ;;
        -time=*|--time=*)
            timebound="${arg#*=}"
            shift
            ;;
        -h|--help)
            echo $usage
            exit 1
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo "invalid option $arg"
            echo "(use -- to delimite launcher and program arguments)"
            echo ""
            echo $usage
            exit 1
            ;;
        *)
            break
            ;;
    esac
done
program_args="$*"

# Execute command
function run {

    # Export two variables for command and arguments. They will be used in the
    # SLURM and amudprun launchers below.
    export SDP_LAUNCH_COMMAND="$1"
    if [ -n "$mem" ] ; then
      echo "setting mem"
      program_args="-ll:gsize $mem $program_args"
    fi
    export SDP_LAUNCH_ARGUMENTS="$program_args"
    export SDP_MEM_LIMIT="$mem"

    cmdline="$program $program_args"
    # Select between srun/amudprun.
    case "$net" in
        ibv)
            if [ -n "$gpu" ] ; then
                # XXX is it right way?
                echo "selecting GPUs is not supported right now!"
                exit 1
            fi
            export SDP_LAUNCH_COMMAND="$SDP_LAUNCH_COMMAND-ibv"
            sbatch --job-name="SDP: $SDP_LAUNCH_COMMAND" --nodes=$nodes --ntasks=$tasks --cpus-per-task=$threads --time=$timebound $SDP_SCRIPT_DIR/slurm_submit.wilkes.sdp
            ;;
        "")
            # Check arguments for local run.

            # nodes == 1
            if [ "$nodes" -ne "1" ] ; then
                echo "number of nodes for local run should be 1."
                exit 1
            fi

            # setup env for amudprun.
            export CSPAWN_CMD="$SDP_SCRIPT_DIR/custom_spawner %N %C"

            # Execute!
            $SDP_BUILDDIR/gasnet-udp/release/bin/amudprun -n $tasks -spawn L $program-local $program_args
            ;;
        *)
            echo "invalid net '$net'"
            exit 1
            ;;
    esac
}

function runregent {
    # Export two variables for command and arguments. They will be used in the
    # SLURM and amudprun launchers below.
    if [ -n "$mem" ] ; then
      echo "setting mem"
      program_args="-ll:gsize $mem $program_args"
    fi
    export SDP_LAUNCH_ARGUMENTS="$2.rg $program_args"
    export SDP_MEM_LIMIT="$mem"

    cmdline="$program $program_args"
    # Select between srun/amudprun.
    case "$net" in
        ibv)
            if [ -n "$gpu" ] ; then
                # XXX is it right way?
                echo "selecting GPUs is not supported right now!"
                exit 1
            fi
            export SDP_SUPPORT_LIBRARY=./$1-ibv.so
            export SDP_LAUNCH_COMMAND="$SDP_BUILDDIR/Legion-ibv/language/regent.py"

            sbatch --job-name="SDP Regent run: $1" --nodes=$nodes --ntasks=$tasks --cpus-per-task=$threads --time=$timebound $SDP_SCRIPT_DIR/slurm_submit.wilkes.sdp
            ;;
        "")
            # Check arguments for local run.

            # nodes == 1
            if [ "$nodes" -ne "1" ] ; then
                echo "number of nodes for local run should be 1."
                exit 1
            fi

            # setup env for amudprun.
            export CSPAWN_CMD="$SDP_SCRIPT_DIR/custom_spawner %N %C"

            # Execute!
            export SDP_SUPPORT_LIBRARY=./$1-local.so
            $SDP_BUILDDIR/gasnet-udp/release/bin/amudprun -n $tasks -spawn L $SDP_BUILDDIR/Legion-udp/language/regent.py $program.rg $program_args
            ;;
        *)
            echo "invalid net '$net'"
            exit 1
            ;;
    esac
}

# Add invocation of run here.
