
# Number of nodes scheduling should assume to be available.
nodes:  16

# Number of major loops to run
loops:  2

# Number of points in input files must be known in advance
points: 6426200

# Input sets. We are going to read the XX polarisation for each of
# them. The weights are going to get used for scheduling.
input:
-
  file:    test_p00_s00_f00.vis
  weight:  8.5581828704
  repeats: 4
-
  file:    test_p00_s00_f01.vis
  weight:  8.451412037
  repeats: 4
-
  file:    test_p00_s01_f00.vis
  weight:  5.3733564815
  repeats: 4
-
  file:    test_p00_s01_f01.vis
  weight:  5.4750347222
  repeats: 4

# Where to put the output residual
output: out.img

# Grid parameters. FFT kernels will be specialised to a concrete
# width, height and pitch, so these values can only be changed in
# coordination with the respective constants (see
# kernels/cpu/gridding/fft.cpp).
grid:
  width:   2048
  height:  2048
  pitch:   2048
  theta:   0.04
  lm-facets: 2
  w-bins:  10

# Grid convolution function parameters. Kernels will also be
# specialised to a set of oversampling factors and GCF sizes. Change
#  - kernels/cpu/gridding/scatter.cpp and
#  - kernels/cpu/gridding/degrid.cpp
# if you want some more choices different here
gcf:
  over:    8
  list:
  -
    file:    gcf16.dat
    size:    16
    w:       0
  -
    file:    gcf32.dat
    size:    32
    w:       5000
  -
    file:    gcf64.dat
    size:    64
    w:       20000

# Clean cycle parameters. The "cycles" parameter is similarly
# hard-coded at this point, see kernels/cpu/gridding/hogbom.cpp
clean:
  gain:      0.65
  threshold: 25
  cycles:    12

# Strategy data for algorithm and distribution configuration.
strategy:
  gridder_type:    cpu # cpu - CPU Halide, gpu - GPU Halide, nv - GPU NVidia
  degridder_type:  cpu # cpu - CPU Halide, gpu - GPU Halide
  uv-tiles-sched:  (seq, seq)
  lm-facets-sched: (par, seq)
  use_files:       true
